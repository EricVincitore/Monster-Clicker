{"version":3,"sources":["components/MonsterItem.js","components/Monsters.js","components/Counter.js","components/Header.js","components/Jumbotron.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["MonsterItem","this","props","monster","id","img","name","src","alt","onClick","markClicked","bind","Component","Monsters","Shuffle","monsters","sort","Math","random","map","className","key","clicked","Counter","state","count","React","Header","href","Jumbotron","Footer","App","Name","setState","console","log","alert","window","location","reload","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50b8526c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class MonsterItem extends Component {\n    \n\n    render() {\n        const {id, img, name} = this.props.monster;\n        return (\n            <div>\n                <img src={img} alt={name}\n                 onClick={this.props.markClicked.bind(this, id)}/>\n                \n            </div>\n        )\n    }\n}\n\nMonsterItem.propTypes = { \n    monster: PropTypes.object.isRequired\n}\nexport default MonsterItem;\n//","import React, { Component } from 'react';\nimport MonsterItem from './MonsterItem';\nimport PropTypes from 'prop-types';\n//import './App.css';\n\nclass Monsters extends Component {\n\n    Shuffle = (monsters) => {\n        monsters.sort(() => Math.random() - 0.5) \n        return monsters;\n    };\n    \n    render () {\n        return this.Shuffle(this.props.monsters).map((monster) => (\n            \n            <div className = \"col-sm-4\">\n            <MonsterItem \n                monster={monster}\n                key={monster.id}\n                id={monster.id}\n                name={monster.name}\n                img={monster.img}\n                clicked={monster.clicked}\n                markClicked = {this.props.markClicked}\n\n            />\n            </div>\n        ))\n    \n    };\n    \n};\n\nMonsters.propTypes = {\n    monsters: PropTypes.array.isRequired\n}\n\nexport default Monsters;","import React from \"react\";\n\nclass Counter extends React.Component {\n    state = {\n        count: -1\n    };\n\n    render () {\n        return (\n            <div>\n                <span className = \"navbar-brand navLeft\"\n                onClick={this.state.count++}>\n                    | Score: {this.state.count} |\n                </span>\n            </div>\n        )\n    }\n}\n\nexport default Counter;","import React from \"react\";\nimport Counter from \"./Counter\";\n\nfunction Header () {\n    return (\n        <nav className=\"navbar fixed-top navbar-dark bg-dark\">\n            <a className=\"navbar-brand navRight\" href=\"#\">Monster Clicker: World</a>\n            <a className=\"navbar-brand navCenter\" href=\"#\">Click an image to begin!</a>\n            <a className=\"navbar-brand navLeft\" href=\"#\"><Counter /></a>\n        </nav>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport Header from \"./Header\";\n\nfunction Jumbotron() {\n    return (\n\n        <div className=\"jumbotron jumbotron-fluid\">\n            <Header />\n\n            <div className=\"container mt-5\">\n        \n                <h1 className=\"display-4\">Monster Clicker: World</h1>\n                <p className=\"lead\">Click a monster to complete its hunt. Don't hunter a monster more than once!</p>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nfunction Footer() {\n    return (\n        <nav className=\"navbar sticky-bottom navbar-dark bg-dark\">\n            <a className=\"navbar-brand\" href=\"#\"></a>\n        </nav>\n    )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Monsters from \"./components/Monsters\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Footer from \"./components/Footer\";\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n    monsters: [\n      {\n        id: 1,\n        Name: \"Nergigante\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/1/1d/Nergigante_16.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 2,\n        name: \"Vaal Hazak\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/b/b5/Vaal_Hazak28.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 3,\n        name: \"Kushala Daora\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/e/e2/Kushala_Daora13.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 4,\n        name: \"Teostra\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/c/cb/Teostra24.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 5,\n        name: \"Lunastra\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/7/7a/Djm-CSgW4AEFEO9.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 6,\n        name: \"Kirin\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/e/ee/Kirin11.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 7,\n        name: \"Xeno'jiiva\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/b/b6/Djm-GB3WwAIu-db.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 8,\n        name: \"Kulve Taroth\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/c/cb/Djm-EXPX4AcK9S-.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 9,\n        name: \"Velkhana\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/c/c3/Velkhanaicon.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 10,\n        name: \"Namielle\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/a/a4/Namielleicon.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 11,\n        name: \"Shara Ishvalda\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/4/4b/Shara_Ishvaldaicon.jpg?width=325\",\n        clicked: false\n      },\n      {\n        id: 12,\n        name: \"Zinogre\",\n        img: \"https://oyster.ignimgs.com/mediawiki/apis.ign.com/monster-hunter-world/1/1f/Zinogreicon.jpg?width=325\",\n        clicked: false\n      }\n    ]\n  };\n\n  markClicked = (id) => {\n    this.setState({\n      monsters: this.state.monsters.map(monster => {\n        if (monster.id === id) {\n          monster.clicked = !monster.clicked;\n          console.log(\"You guessed correctly!\")\n        }\n        if (monster.id === id && !monster.clicked !== false) {\n          monster.clicked = !monster.clicked;\n          alert(\"Oh No! You have hunted a monster twice. It could go extinct!\")\n          window.location.reload(false)\n        }\n        return monster;\n      })\n    })\n  };\n\n  render() {\n    return (\n      <div>\n\n        <Jumbotron />\n        <div className=\"container\">\n          <div className=\"row\">\n            <Monsters\n              monsters={this.state.monsters}\n              markClicked={this.markClicked}\n\n            />\n          </div>\n        </div>\n        <Footer />\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n\n//Pseudo code:\n  //design webpage layout\n      // **** fixed navbar\n      // **** container for all the images to shuffle\n      // **** jumbotron with \"Click game\" and instructions\n      // **** navbar with \"click game\" on the left\n      // navbar with click result \"You Guessed Correctly\" or You guesses incorrectly in center\n      // navbar with your score/ top score on the left, top score is not persistent\n      // sticky footer\n  // **** Render 12 different images on the page \n  // **** on click for each image that changes the data state\n  // on click for each image makes click result in navbar flash blue or red\n  // on click resets image locations\n  // use data state to keep track of score\n  // if user clicks on an image that has already been clicked score resets","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}